---
- name: check if we need to do installer things
  uri:
    url: https://localhost/api/v1/ping/
    method: GET
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False
  register: checkout
  ignore_errors: True

- name: set conditional if the above didn't error
  set_fact:
    towerchk: "{{ checkout.json.version }}"
  when: checkout.json is defined

- name: download tower installer
  get_url:
    url: https://releases.ansible.com/ansible-tower/setup-bundle/ansible-tower-setup-bundle-{{ towerversion }}.el7.tar.gz
    dest: /tmp/ansible-tower-setup-{{ towerversion }}.el7.tar.gz
    mode: 0640
  when: towerchk != realtowerversion

- name: extract installer
  unarchive:
    src: /tmp/ansible-tower-setup-bundle-{{ towerversion }}.el7.tar.gz
    dest: /tmp/
    remote_src: True
  when: towerchk != realtowerversion

- name: template inventory file
  template:
    src: inventory
    dest: /tmp/ansible-tower-setup-bundle-{{ towerversion }}.el7/inventory
  when: towerchk != realtowerversion

- name: run the tower installer
  shell: ./setup.sh chdir=/tmp/ansible-tower-setup-bundle-{{ towerversion }}.el7
  when: towerchk != realtowerversion

#- name: wait for tower to be up
#  uri:
#    url: https://localhost/api/v1/ping/
#    method: GET
#    user: admin
#    password: "{{ towerpass }}"
#    validate_certs: False
#  register: check2
#  until: check2.json is defined and check2.json.version == towerversion
#  retries: 10
#  delay: 30
  #when: towerchk != towerversion

- name: Post license key
  uri:
    url: https://localhost/api/v1/config/
    method: POST
    user: admin
    password: "{{ towerpass }}"
    body: "{{ tower_license }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes
  ignore_errors: True

#- name: Post license key
#  uri:
#    url: https://localhost/api/v1/config/
#    method: POST
#    user: admin
#    password: "{{ towerpass }}"
#    body: "{{ lookup('file','tower_license.json') }}"
#    body_format: json
#    validate_certs: False
#  ignore_errors: True

#- name: create project
#  uri:
#    url:  https://localhost/api/v1/projects/
#    method: POST
#    user: admin
#    password: "{{ towerpass }}"
#    body: "{{ lookup('file','tower_project.json') }}"
#    body_format: json
#    validate_certs: False
#    status_code:
#      - 200
#      - 201
#      - 400
#  register: response
#  changed_when: response.status == 201
#
#- name: kick off project sync
#  uri:
#    url:  https://localhost/api/v1/projects/7/update/
#    method: POST
#    user: admin
#    password: "{{ towerpass }}"
#    validate_certs: False
#    status_code:
#      - 200
#      - 201
#      - 202
#  when: response.status == 201
