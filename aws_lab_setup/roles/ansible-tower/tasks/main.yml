---
- name: check if we need to do installer things
  uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False
  register: checkout
  ignore_errors: True

- name: set conditional if the above didn't error
  set_fact:
    towerchk: "{{ checkout.json.version }}"
  when: checkout.json is defined

- debug:
    msg: "towerchk is {{ towerchk }}"

- debug:
    msg: "realtowerversion is {{ realtowerversion }}"

###
#- name: download tower installer
#  get_url:
#    url: https://releases.ansible.com/ansible-tower/setup-bundle/ansible-tower-setup-bundle-{{ towerversion }}.el7.tar.gz
#    dest: /tmp/ansible-tower-setup-bundle-{{ towerversion }}.el7.tar.gz
#    mode: 0640
#  when: towerchk != realtowerversion
#
#- name: extract installer
#  unarchive:
#    src: /tmp/ansible-tower-setup-bundle-{{ towerversion }}.el7.tar.gz
#    dest: /tmp/
#    remote_src: True
#  when: towerchk != realtowerversion
#
#- name: template inventory file
#  template:
#    src: inventory
#    dest: /tmp/ansible-tower-setup-bundle-{{ towerversion }}.el7/inventory
#  when: towerchk != realtowerversion
#
#- name: run the tower installer
#  shell: ./setup.sh chdir=/tmp/ansible-tower-setup-bundle-{{ towerversion }}.el7
#  when: towerchk != realtowerversion
#####

- name: Download Ansible Tower
  get_url:
    #url: '{{ tower_installer_url | default("https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-3.5.3-1.tar.gz") }}'
    url: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-{{ towerversion }}.tar.gz
    dest: /tmp/tower.tar.gz

- name: Create directory for Ansible Tower
  file: path=/tmp/tower_install state=directory

- name: Extract Ansible Tower install
  unarchive:
    src: /tmp/tower.tar.gz
    dest: /tmp/tower_install
    remote_src: yes
    extra_opts: ['--strip-components=1', '--show-stored-names']

- name: template inventory file for Ansible Tower Install
  template:
    #src: tower_install.j2
    src: inventory
    dest: /tmp/tower_install/inventory

- copy:
    dest: /tmp/tower_install/extras-vars.yml
    content: |
      redhat_aws_rhui_repos: {{ redhat_aws_rhui_repos | to_yaml }}

- name: run the Ansible Tower installer
  shell: ./setup.sh -e @extras-vars.yml
  args:
    chdir: /tmp/tower_install
  async: 900
  poll: 10

- name: install ansible-tower-cli and requests
  become: yes
  pip:
    name:
      - ansible-tower-cli
      - "requests==2.6.0"
    state: latest

- name: wait for Ansible Tower to be up
  uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: admin
    password: "{{workshop_password}}"
    validate_certs: False
  register: check2
  until: check2.json is defined
  retries: 10
  delay: 30

- name: Display /api/v2/ping results
  debug:
    msg: '{{ check2.json }}'

####
#- name: wait for tower to be up
#  uri:
#    url: https://localhost/api/v1/ping/
#    method: GET
#    user: admin
#    password: "{{ towerpass }}"
#    validate_certs: False
#  register: check2
#  until: check2.json is defined and check2.json.version == towerversion
#  retries: 10
#  delay: 30
  #when: towerchk != towerversion

- name: Post license key
  uri:
    url: https://localhost/api/v1/config/
    method: POST
    user: admin
    password: "{{ towerpass }}"
    body: "{{ tower_license }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes
  ignore_errors: False

#- name: Post license key
#  uri:
#    url: https://localhost/api/v1/config/
#    method: POST
#    user: admin
#    password: "{{ towerpass }}"
#    body: "{{ lookup('file','tower_license.json') }}"
#    body_format: json
#    validate_certs: False
#  ignore_errors: True

#- name: create project
#  uri:
#    url:  https://localhost/api/v1/projects/
#    method: POST
#    user: admin
#    password: "{{ towerpass }}"
#    body: "{{ lookup('file','tower_project.json') }}"
#    body_format: json
#    validate_certs: False
#    status_code:
#      - 200
#      - 201
#      - 400
#  register: response
#  changed_when: response.status == 201
#
#- name: kick off project sync
#  uri:
#    url:  https://localhost/api/v1/projects/7/update/
#    method: POST
#    user: admin
#    password: "{{ towerpass }}"
#    validate_certs: False
#    status_code:
#      - 200
#      - 201
#      - 202
#  when: response.status == 201
