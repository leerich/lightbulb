---
- hosts: localhost
  #connection: local
  gather_facts: False
  become: false

  tasks:
    #- name: Remove Instance for Webserver and Guacamole
    #  ec2:
    #    assign_public_ip: yes
    #    key_name: "{{ ec2_key_name }}"
    #    group: "{{ ec2_security_group }}"
    #    instance_type: "t2.medium"
    #    image: "ami-877b9e91"
    #    region: "{{ ec2_region }}"
    #    #zone: "{{ ec2_zone }}"
    #    exact_count: 0
    #    count_tag:
    #      Name: "{{ ec2_name_prefix }}-workshop-webserver"
    #    instance_tags:
    #      Name: "{{ ec2_name_prefix }}-workshop-webserver"
    #    wait: true
    #    vpc_subnet_id: "{{ ec2_vpc_subnet_id | default(omit) }}"
    #    volumes:
    #      - device_name: /dev/sda1
    #        volume_type: gp2
    #        volume_size: 20
    #        delete_on_termination: true

    - name: Provision Instance for Webserver and Guacamole
      ec2:
        assign_public_ip: yes
        key_name: "{{ ec2_key_name }}"
        group: "{{ ec2_security_group }}"
        instance_type: "t2.medium"
        image: "ami-011b3ccf1bd6db744"
        region: "{{ ec2_region }}"
        #zone: "{{ ec2_zone }}"
        exact_count: "{{ ec2_exact_count }}"
        count_tag:
          Name: "{{ ec2_name_prefix }}-workshop-webserver"
        instance_tags:
          Name: "{{ ec2_name_prefix }}-workshop-webserver"
        wait: true
        vpc_subnet_id: "{{ ec2_vpc_subnet_id | default(omit) }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 20
            delete_on_termination: true
      register: ec2


    - name: Wait for SSH
      delegate_to: "{{ item.public_ip }}"
      wait_for_connection:
        delay: 15
        timeout: 320
      loop: "{{ ec2.instances }}"

    #- name: Get Public IP
    #  set_fact:
    #    host_addr: "{{ item.public_ip }}"
    #  with_items:  "{{ ec2.instances }}"

    #- debug:
    #    var: "{{ host_addr }}"

    - name: Add instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: web_server
      loop: "{{ ec2.instances }}"

    - name: Create DNS name for the web server
      route53:
        state: "{{ route53_state }}"
        zone: "{{workshop_dns_zone}}"
        #region: "{{ec2_region}}"
        #record: "lightbulb.{{workshop_dns_zone}}"
        record: "{{ec2_name_prefix}}.{{workshop_dns_zone}}"
        overwrite: yes
        value: "{{ item.public_ip }}"
        type: A
      loop: "{{ ec2.instances }}"
      #when: "'control' in item.invocation.module_args.instance_tags.Name"
#  roles:
#  - web_instance
#  tags:
#    - skip

- name: Install Web Server
  hosts: web_server
  gather_facts: false
#- hosts: "{{ host_addr }}"
  roles:
    - web_server
  tags:
    - web_server_only

#- name: Install guacamole
#  hosts: web_server
#  gather_facts: false
#  tasks:
#    - include: "install_guacamole.yml"
#  tags:
#    - guacamole

- hosts: web_server
  roles:
  - role: joe-speedboat.guacamole
    mariadb_db_host: 'localhost'
    mariadb_db_name: 'guacamole'
    mariadb_db_user: 'guacamole'
    mariadb_user_password: '.change-this_000.'
    mariadb_root_password: '.change-this_111.'
  tasks:
  - name: RHEL | Disable SELinux
    selinux:
      state: permissive
      policy: targeted
    register: selinux_disable
    #notify:
    #  - reboot
    #  - wait for instance
    tags:
      - common
    ignore_errors: yes

  - name: Copy user-mapping.xml file to guacamole directory
    copy:
      src: ./user-mapping.xml
      dest: /usr/share/tomcat/.guacamole
      owner: root
      group: tomcat
      mode: 0755
    notify: restart_guacamole

  -  debug: msg="trigger guacamole-restart"
     notify: restart_guacamole
     changed_when: true


  - name: Copy nginx configuration file
    copy:
      src: files/nginx.conf
      dest: /etc/nginx/
      mode: 0644
    notify: restart nginx

  -  debug: msg="trigger nginx-restart"
     notify: restart nginx
     changed_when: true

  - name: install firewalld
    yum:
      name: firewalld
      state: present

  - name: start firewalld
    service:
      name: firewalld
      enabled: yes
      state: started

  - name: open https port on firewalld
    firewalld:
      service: https
      permanent: true
      state: enabled

  - name: open https port on firewalld
    firewalld:
      service: http
      permanent: true
      state: enabled

  - name: open https port on firewalld
    firewalld:
      port: "{{ item }}"
      permanent: true
      state: enabled
    with_items:
      - 8080/tcp
      - 8081/tcp
      - 8000/tcp

  - name: enable firewalld
    service:
      name: firewalld
      enabled: yes
      state: restarted
    ignore_errors: yes

  handlers:
    - name: restart_guacamole
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - guacd
        - tomcat

    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
        enabled: yes

- name: Install certbot on guacamole server
  hosts: web_server
  become: yes
  gather_facts: false
  roles:
    - guacamole_certbot
  tags: guacamole_certbot
